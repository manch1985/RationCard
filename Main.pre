
# 1 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\Main.c"

# 19 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\pic16f887.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTD @ 0x008;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;
volatile unsigned char RCSTA @ 0x018;
volatile unsigned char TXREG @ 0x019;
volatile unsigned char RCREG @ 0x01A;
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;

volatile unsigned char TRISD @ 0x088;

volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;
volatile unsigned char PCON @ 0x08E;
volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPMSK @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;
volatile unsigned char VRCON @ 0x097;
volatile unsigned char TXSTA @ 0x098;
volatile unsigned char SPBRG @ 0x099;
volatile unsigned char SPBRGH @ 0x09A;
volatile unsigned char PWM1CON @ 0x09B;
volatile unsigned char ECCPAS @ 0x09C;
volatile unsigned char PSTRCON @ 0x09D;
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;
volatile unsigned char CM1CON0 @ 0x107;
volatile unsigned char CM2CON0 @ 0x108;
volatile unsigned char CM2CON1 @ 0x109;
volatile unsigned char EEDAT @ 0x10C;

volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;
volatile unsigned char SRCON @ 0x185;
volatile unsigned char BAUDCTL @ 0x187;
volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;
volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;



volatile bit RD0 @ ((unsigned)&PORTD*8)+0;
volatile bit RD1 @ ((unsigned)&PORTD*8)+1;
volatile bit RD2 @ ((unsigned)&PORTD*8)+2;
volatile bit RD3 @ ((unsigned)&PORTD*8)+3;
volatile bit RD4 @ ((unsigned)&PORTD*8)+4;
volatile bit RD5 @ ((unsigned)&PORTD*8)+5;
volatile bit RD6 @ ((unsigned)&PORTD*8)+6;
volatile bit RD7 @ ((unsigned)&PORTD*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;

volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit ULPWUIF @ ((unsigned)&PIR2*8)+2;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;
volatile bit OSFIF @ ((unsigned)&PIR2*8)+7;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;


volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION*8)+2;
volatile bit PSA @ ((unsigned)&OPTION*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISD0 @ ((unsigned)&TRISD*8)+0;
volatile bit TRISD1 @ ((unsigned)&TRISD*8)+1;
volatile bit TRISD2 @ ((unsigned)&TRISD*8)+2;
volatile bit TRISD3 @ ((unsigned)&TRISD*8)+3;
volatile bit TRISD4 @ ((unsigned)&TRISD*8)+4;
volatile bit TRISD5 @ ((unsigned)&TRISD*8)+5;
volatile bit TRISD6 @ ((unsigned)&TRISD*8)+6;
volatile bit TRISD7 @ ((unsigned)&TRISD*8)+7;


volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;

volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit ULPWUIE @ ((unsigned)&PIE2*8)+2;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;
volatile bit OSFIE @ ((unsigned)&PIE2*8)+7;


volatile bit BOR @ ((unsigned)&PCON*8)+0;
volatile bit POR @ ((unsigned)&PCON*8)+1;
volatile bit SBOREN @ ((unsigned)&PCON*8)+4;
volatile bit ULPWUE @ ((unsigned)&PCON*8)+5;


volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit LTS @ ((unsigned)&OSCCON*8)+1;
volatile bit HTS @ ((unsigned)&OSCCON*8)+2;
volatile bit OSTS @ ((unsigned)&OSCCON*8)+3;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;


volatile bit VR0 @ ((unsigned)&VRCON*8)+0;
volatile bit VR1 @ ((unsigned)&VRCON*8)+1;
volatile bit VR2 @ ((unsigned)&VRCON*8)+2;
volatile bit VR3 @ ((unsigned)&VRCON*8)+3;
volatile bit VRSS @ ((unsigned)&VRCON*8)+4;
volatile bit VRR @ ((unsigned)&VRCON*8)+5;
volatile bit VROE @ ((unsigned)&VRCON*8)+6;
volatile bit VREN @ ((unsigned)&VRCON*8)+7;


volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SENDB @ ((unsigned)&TXSTA*8)+3;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;


volatile bit BRG0 @ ((unsigned)&SPBRG*8)+0;
volatile bit BRG1 @ ((unsigned)&SPBRG*8)+1;
volatile bit BRG2 @ ((unsigned)&SPBRG*8)+2;
volatile bit BRG3 @ ((unsigned)&SPBRG*8)+3;
volatile bit BRG4 @ ((unsigned)&SPBRG*8)+4;
volatile bit BRG5 @ ((unsigned)&SPBRG*8)+5;
volatile bit BRG6 @ ((unsigned)&SPBRG*8)+6;
volatile bit BRG7 @ ((unsigned)&SPBRG*8)+7;


volatile bit BRG8 @ ((unsigned)&SPBRGH*8)+0;
volatile bit BRG9 @ ((unsigned)&SPBRGH*8)+1;
volatile bit BRG10 @ ((unsigned)&SPBRGH*8)+2;
volatile bit BRG11 @ ((unsigned)&SPBRGH*8)+3;
volatile bit BRG12 @ ((unsigned)&SPBRGH*8)+4;
volatile bit BRG13 @ ((unsigned)&SPBRGH*8)+5;
volatile bit BRG14 @ ((unsigned)&SPBRGH*8)+6;
volatile bit BRG15 @ ((unsigned)&SPBRGH*8)+7;


volatile bit PDC0 @ ((unsigned)&PWM1CON*8)+0;
volatile bit PDC1 @ ((unsigned)&PWM1CON*8)+1;
volatile bit PDC2 @ ((unsigned)&PWM1CON*8)+2;
volatile bit PDC3 @ ((unsigned)&PWM1CON*8)+3;
volatile bit PDC4 @ ((unsigned)&PWM1CON*8)+4;
volatile bit PDC5 @ ((unsigned)&PWM1CON*8)+5;
volatile bit PDC6 @ ((unsigned)&PWM1CON*8)+6;
volatile bit PRSEN @ ((unsigned)&PWM1CON*8)+7;


volatile bit PSSBD0 @ ((unsigned)&ECCPAS*8)+0;
volatile bit PSSBD1 @ ((unsigned)&ECCPAS*8)+1;
volatile bit PSSAC0 @ ((unsigned)&ECCPAS*8)+2;
volatile bit PSSAC1 @ ((unsigned)&ECCPAS*8)+3;
volatile bit ECCPAS0 @ ((unsigned)&ECCPAS*8)+4;
volatile bit ECCPAS1 @ ((unsigned)&ECCPAS*8)+5;
volatile bit ECCPAS2 @ ((unsigned)&ECCPAS*8)+6;
volatile bit ECCPASE @ ((unsigned)&ECCPAS*8)+7;


volatile bit STRA @ ((unsigned)&PSTRCON*8)+0;
volatile bit STRB @ ((unsigned)&PSTRCON*8)+1;
volatile bit STRC @ ((unsigned)&PSTRCON*8)+2;
volatile bit STRD @ ((unsigned)&PSTRCON*8)+3;
volatile bit STRSYNC @ ((unsigned)&PSTRCON*8)+4;


volatile bit VCFG0 @ ((unsigned)&ADCON1*8)+4;
volatile bit VCFG1 @ ((unsigned)&ADCON1*8)+5;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;


volatile bit C1CH0 @ ((unsigned)&CM1CON0*8)+0;
volatile bit C1CH1 @ ((unsigned)&CM1CON0*8)+1;
volatile bit C1R @ ((unsigned)&CM1CON0*8)+2;
volatile bit C1POL @ ((unsigned)&CM1CON0*8)+4;
volatile bit C1OE @ ((unsigned)&CM1CON0*8)+5;
volatile bit C1OUT @ ((unsigned)&CM1CON0*8)+6;
volatile bit C1ON @ ((unsigned)&CM1CON0*8)+7;


volatile bit C2CH0 @ ((unsigned)&CM2CON0*8)+0;
volatile bit C2CH1 @ ((unsigned)&CM2CON0*8)+1;
volatile bit C2R @ ((unsigned)&CM2CON0*8)+2;
volatile bit C2POL @ ((unsigned)&CM2CON0*8)+4;
volatile bit C2OE @ ((unsigned)&CM2CON0*8)+5;
volatile bit C2OUT @ ((unsigned)&CM2CON0*8)+6;
volatile bit C2ON @ ((unsigned)&CM2CON0*8)+7;


volatile bit C2SYNC @ ((unsigned)&CM2CON1*8)+0;
volatile bit T1GSS @ ((unsigned)&CM2CON1*8)+1;
volatile bit C2RSEL @ ((unsigned)&CM2CON1*8)+4;
volatile bit C1RSEL @ ((unsigned)&CM2CON1*8)+5;
volatile bit MC2OUT @ ((unsigned)&CM2CON1*8)+6;
volatile bit MC1OUT @ ((unsigned)&CM2CON1*8)+7;


volatile bit FVREN @ ((unsigned)&SRCON*8)+0;
volatile bit PULSR @ ((unsigned)&SRCON*8)+2;
volatile bit PULSS @ ((unsigned)&SRCON*8)+3;
volatile bit C2REN @ ((unsigned)&SRCON*8)+4;
volatile bit C1SEN @ ((unsigned)&SRCON*8)+5;
volatile bit SR0 @ ((unsigned)&SRCON*8)+6;
volatile bit SR1 @ ((unsigned)&SRCON*8)+7;


volatile bit ABDEN @ ((unsigned)&BAUDCTL*8)+0;
volatile bit WUE @ ((unsigned)&BAUDCTL*8)+1;
volatile bit BRG16 @ ((unsigned)&BAUDCTL*8)+3;
volatile bit SCKP @ ((unsigned)&BAUDCTL*8)+4;
volatile bit RCIDL @ ((unsigned)&BAUDCTL*8)+6;
volatile bit ABDOVF @ ((unsigned)&BAUDCTL*8)+7;


volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;

volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;



volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 503 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 556
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 629 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 3 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double);
extern double cos(double);
extern double tan(double);
extern double asin(double);
extern double acos(double);
extern double atan(double);
extern double atan2(double, double);
extern double log(double);
extern double log10(double);
extern double pow(double, double);
extern double exp(double);
extern double sinh(double);
extern double cosh(double);
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 4 "C:\Program Files (x86)\HI-TECH Software\PICC\9.80\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 168 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\always.h"
struct sixteen_bits
{
unsigned char bit0 :1;
unsigned char bit1 :1;
unsigned char bit2 :1;
unsigned char bit3 :1;
unsigned char bit4 :1;
unsigned char bit5 :1;
unsigned char bit6 :1;
unsigned char bit7 :1;
unsigned char bit8 :1;
unsigned char bit9 :1;
unsigned char bit10 :1;
unsigned char bit11 :1;
unsigned char bit12 :1;
unsigned char bit13 :1;
unsigned char bit14 :1;
unsigned char bit15 :1;
};

struct eight_bits
{
unsigned char bit0 :1;
unsigned char bit1 :1;
unsigned char bit2 :1;
unsigned char bit3 :1;
unsigned char bit4 :1;
unsigned char bit5 :1;
unsigned char bit6 :1;
unsigned char bit7 :1;
};

struct two_bytes
{
unsigned char low;
unsigned char high;
};

union wordtype
{
unsigned int word;
struct two_bytes byte;
struct sixteen_bits part;
};

union chartype
{
unsigned char byte;
struct eight_bits part;
};

# 20 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\Delay.c"
unsigned char delayus_variable;

# 39 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\delay.h"
extern unsigned char delayus_variable;

# 160
void DelayBigUs(unsigned int cnt);
void DelayMs(unsigned char cnt);
void DelayMs_interrupt(unsigned char cnt);
void DelayBigMs(unsigned int cnt);
void DelayS(unsigned char cnt);

# 24 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\Delay.c"
void DelayBigUs(unsigned int cnt)
{
unsigned char i;

i = (unsigned char)(cnt>>8);
while(i>=1)
{
i--;
{ delayus_variable=(unsigned char)(253/4); asm("nop"); } asm("decfsz _delayus_variable,f"); asm("goto $ - 2");;
asm("clrwdt");
}
{ delayus_variable=(unsigned char)((unsigned char)(cnt & 0xFF)/4); asm("nop"); } asm("decfsz _delayus_variable,f"); asm("goto $ - 2");;
}

void DelayMs(unsigned char cnt)
{
unsigned char i;
do {
i = 4;
do {
{ delayus_variable=(unsigned char)(250/4); asm("nop"); } asm("decfsz _delayus_variable,f"); asm("goto $ - 2");;
asm("clrwdt");
} while(--i);
} while(--cnt);
}


void DelayMs_interrupt(unsigned char cnt)
{
unsigned char i;
do {
i = 4;
do {
{ delayus_variable=(unsigned char)(250/4); asm("nop"); } asm("decfsz _delayus_variable,f"); asm("goto $ - 2");;
} while(--i);
} while(--cnt);
}

void DelayBigMs(unsigned int cnt)
{
unsigned char i;
do {
i = 4;
do {
{ delayus_variable=(unsigned char)(250/4); asm("nop"); } asm("decfsz _delayus_variable,f"); asm("goto $ - 2");;
asm("clrwdt");
} while(--i);
} while(--cnt);
}

void DelayS(unsigned char cnt)
{
unsigned char i;
do {
i = 4;
do {
DelayMs(250);
asm("clrwdt");
} while(--i);
} while(--cnt);
}

# 1 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\lcd.c"
const char a[]={"0123456789"};

# 8
void enable()
{
RD3 = 1;
_delay((unsigned long)((4)*(20000000/4000.0)));
RD3 = 0;
}

void lcdport(char a)
{
if(a & 1)
RD4 = 1;
else
RD4 = 0;

if(a & 2)
RD5 = 1;
else
RD5 = 0;

if(a & 4)
RD6 = 1;
else
RD6 = 0;

if(a & 8)
RD7 = 1;
else
RD7 = 0;
}

void lcdcmd(char a)
{
unsigned char y,z;
z=a>>4&0x0F;
y=a&0x0F;

lcdport(z);
enable();
lcdport(y);
enable();
}

void lcddata(char a)
{
unsigned char y,z;
z=a>>4&0x0F;
y=a&0x0F;
RD2=1;
lcdport(z);
enable();
lcdport(y);
enable();
RD2 = 0;
}

void lcdclear()
{
lcdcmd(0);
lcdcmd(1);
}


void lcd_init()
{
lcdport(0x00);
_delay((unsigned long)((20)*(20000000/4000.0)));
lcdcmd(0x03);
_delay((unsigned long)((5)*(20000000/4000.0)));
lcdcmd(0x03);
_delay((unsigned long)((11)*(20000000/4000.0)));
lcdcmd(0x03);

lcdcmd(0x02);
lcdcmd(0x02);
lcdcmd(0x28);
lcdcmd(0x00);
lcdcmd(0x0C);
lcdcmd(0x00);
lcdcmd(0x06);
}

void lcdstring(const char *a)
{
while(*a)
{
lcddata(*a++);
}
}

void Lcd_Shift_Right()
{
lcdcmd(0x1C);
}

void Lcd_Shift_Left()
{
lcdcmd(0x18);
}

# 9 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\softuart.c"
void SoftWareUart_Init()
{
RD1=1;
RD0=1;
TRISD1=0;
TRISD0=1;
RD1=1;
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));
}


unsigned char softreceive()
{
char mask;
char Data;
Data=0;
while(RD0);
_delay((unsigned long)(((((1000000/9600)-2)/2))*(20000000/4000000.0)));
for(mask=0x01;mask!=0;mask=mask<<1)
{
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));
if(RD0)Data=Data|mask;
}
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));
return Data;
}

void softtransmit(unsigned char Data)
{
char mask;
RD1 = 0;
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));

for (mask=0x01;mask!=0;mask=mask<<1)
{
if(Data&mask) RD1 = 1;
else RD1 = 0;
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));
}
RD1 = 1;
_delay((unsigned long)((((1000000/9600)-2))*(20000000/4000000.0)));
}

void softuart_string(const char *p)
{
while(*p){
softtransmit(*p++);
}
}

# 1 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\UART.C"
unsigned char receive()
{
while(!RCIF);
return(RCREG);
}
void transmit(unsigned char data)
{
while(!TXIF);
TXREG =data;
}
void UARTinit()
{
TXSTA = 0x24;
RCSTA = 0x90;
SPBRG = 129;
INTCON = 0xC0;
RCREG = 0;
}

void usartstring(const unsigned char *st)
{
while(*st)
transmit(*st++);
}


void gsm_init()
{
unsigned char d;
lcdcmd(0X80);
lcdstring("GSM INITIALIZING");
lcdcmd(0XC0);
lcdstring("PLS WAIT........");
DelayS(5);
lcdcmd(0x01);

usartstring("AT\r");
transmit(0x0D);
while((d=receive())!='K');

usartstring("AT+CPIN?\r");
transmit(0x0D);
while((d=receive())!='K');

usartstring("AT+CSDH=1\r");
transmit(0x0D);
while((d=receive())!='K');

usartstring("AT+CMGF=1\r");
transmit(0x0D);
while((d=receive())!='K');

usartstring("AT+CNMI=2,2,0,0,0\r");
transmit(0x0D);
while((d=receive())!='K');
lcdcmd(0x80);
lcdstring("GSM READY");
DelayS(10);
lcdcmd(0x01);
}

void send_moister_message2()
{
unsigned char d;
usartstring("AT+CMGS=\"+919790080510\"");
transmit(0x0D);
while((d=receive())!='>');
usartstring("moister level low moter ON");
transmit(0x1A);
while((d=receive())!='K');
}
void send_moister_message1()
{
unsigned char d;
usartstring("AT+CMGS=\"+919790080510\"");
transmit(0x0D);
while((d=receive())!='>');
usartstring("moister level high moter OFF");
transmit(0x1A);
while((d=receive())!='K');
}
void send_stage1_message()
{
unsigned char d;
usartstring("AT+CMGS=\"+919790080510\"");
transmit(0x0D);
while((d=receive())!='>');
usartstring("Crop crossed stage1");
transmit(0x1A);
while((d=receive())!='K');
}
void send_stage2_message()
{
unsigned char d;
usartstring("AT+CMGS=\"+919790080510\"");
transmit(0x0D);
while((d=receive())!='>');
usartstring("Crop crossed stage2");
transmit(0x1A);
while((d=receive())!='K');
}
void send_stage3_message()
{
unsigned char d;
usartstring("AT+CMGS=\"+919790080510\"");
transmit(0x0D);
while((d=receive())!='>');
usartstring("Crop crossed stage3");
transmit(0x1A);
while((d=receive())!='K');
}

# 12 "F:\PiROOT_Tech\student_projects\AutomaticRationCardSystem\Main.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3FFA & 0x3FF7 & 0x3FEF & 0x3CFF & 0x3FFF & 0x2FFF");

# 20
unsigned int c1bal=999,c2bal=999,c1,c2,User=0,RiseStock=0,SugarStock=0,KeroseneStock=0;
char j,i,k[15];
unsigned char User1Rise=0,
User2Rise=0,
User3Rise=0,
User1Kerosene=0,
User2Kerosene=0,
User3Kerosene=0,
User1Sugar=0,
User2Sugar=0,
User3Sugar=0;

int User1amt=0,User2amt=0,User3amt=0;
const char digit[]={"0123456789"};
unsigned char card_store[15];
bit rfid_flag=0;
unsigned char User1[]={"1C0082CE6939"};
unsigned char User2[]={"1B003C5BFC80"};
unsigned char User3[]={"1B003C5BFC81"};
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=2"); asm("\tdb\t" "10" "," "0" "," "50" "," "10" "," "8" "," "0" "," "0" "," "0");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=2"); asm("\tdb\t" "10" "," "0" "," "30" "," "8" "," "6" "," "0" "," "0" "," "0");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=2"); asm("\tdb\t" "10" "," "0" "," "20" "," "4" "," "5" "," "0" "," "0" "," "0");
asm("\tpsect eeprom_data,class=EEDATA,delta=2,space=2"); asm("\tdb\t" "10" "," "0" "," "255" "," "200" "," "200" "," "0" "," "0" "," "0");



void interrupt ISR(void)
{
}

void RFID_read()
{
if(!rfid_flag)
{
for(int i=0;i<12;i++)
{card_store[i]=softreceive();}
rfid_flag=1;
}
}
void DisplayAmnt(unsigned char Location, int Amnt)
{
lcdcmd(Location);
lcddata(digit[Amnt/1000]);
lcddata(digit[Amnt%1000/100]);
lcddata(digit[Amnt%1000%100/10]);
lcddata(digit[Amnt%1000%100%10]);
}

void ReadAmnt()
{
User1amt=(eeprom_read(0)*100)+eeprom_read(1);
User2amt=(eeprom_read(8)*100)+eeprom_read(15);
User3amt=(eeprom_read(16)*100)+eeprom_read(23);
User1Rise = eeprom_read(2);
User2Rise = eeprom_read(10);
User3Rise = eeprom_read(18);
User1Kerosene = eeprom_read(4);
User2Kerosene = eeprom_read(12);
User3Kerosene = eeprom_read(20);
User1Sugar = eeprom_read(3);
User2Sugar = eeprom_read(11);
User3Sugar = eeprom_read(19);
}

void ReadStock()
{
RiseStock=(eeprom_read(24)*100)+eeprom_read(25);
SugarStock=eeprom_read(26);
KeroseneStock=eeprom_read(27);
}

void DisplayStock()
{
lcdcmd(0x80);
lcdstring("    STOCK DETAILS   ");
lcdcmd(0xC0);
lcdstring("RISE:      Kg       ");
DisplayAmnt(0XC5,RiseStock);
lcdcmd(0x94);
lcdstring("SUGAR:    Kg         ");
DisplayAmnt(0x9A,SugarStock);
lcdcmd(0xD4);
lcdstring("KEROSENE:     Lts    ");
DisplayAmnt(0XDD,KeroseneStock);
}
void DisplaySugar(unsigned char Location, unsigned char Sugar)
{
lcdcmd(Location);
lcddata(digit[Sugar/10]);
lcddata(digit[Sugar%10]);
}
void DisplayRise(unsigned char Location, unsigned char Rise)
{
lcdcmd(Location);
lcddata(digit[Rise/10]);
lcddata(digit[Rise%10]);
}
void DisplayKerosene(unsigned char Location, unsigned char Kerosene)
{
lcdcmd(Location);
lcddata(digit[Kerosene/10]);
lcddata(digit[Kerosene%10]);
}

void uart_init()
{
PORTC=0xFF;
TRISC=0x80;
TXSTA=0X24;
RCSTA=0X90;
SPBRG=129;
RCREG=0;
}
void paramter()
{
c1=(eeprom_read(0)*100)+eeprom_read(1);
c2=(eeprom_read(2)*100)+eeprom_read(3);
}
void startup()
{
lcdcmd(0x80);
lcdstring("AUTOMATIC RATION ");
lcdcmd(0xC0);
lcdstring("   CARD SYSTEM   ");
_delay((unsigned long)((1000)*(20000000/4000.0)));
lcdcmd(0x01);
_delay((unsigned long)((500)*(20000000/4000.0)));
lcdcmd(0x80);
lcdstring("PLEASE TAP YOUR  ");
lcdcmd(0xC0);
lcdstring("SMART CARD       ");
_delay((unsigned long)((1000)*(20000000/4000.0)));
}

void main()
{
ANSEL=0x00;
ANSELH=0x00;
TRISD=0X01;
PORTD=0X00;
TRISC=0X0F;
PORTC=0X00;
uart_init();
lcd_init();
paramter();
SoftWareUart_Init();
startup();


while(1)
{
if(!RC0)
{
lcdstring("PLEASE TAP YOUR  ");
lcdcmd(0xC0);
lcdstring("SMART CARD       ");
_delay((unsigned long)((200)*(20000000/4000.0)));
rfid_flag=0;
}
RFID_read();


if(strcmp(card_store,User1)==0)
{
User=1;
card_store[0]=0;
}
else if(strcmp(card_store,User2)==0)
{
User=2;
card_store[0]=0;
}
else if(strcmp(card_store,User3)==0)
{
User=3;
card_store[0]=0;
}

switch(User)
{
case 1:
{
ReadAmnt();
lcdcmd(0x80);
lcdstring("USER1 AMOUNT:       ");
DisplayAmnt(0X8D,User1amt);
lcdcmd(0xC0);
lcdstring("RISE:   Kg          ");
DisplayRise(0XC5,User1Rise);
lcdcmd(0x94);
lcdstring("SUGAR:   Kg         ");
DisplaySugar(0x9A,User1Sugar);
lcdcmd(0xD4);
lcdstring("KEROSENE:   Lts     ");
DisplayKerosene(0XDD,User1Kerosene);
User=0;
break;
}
case 2:
{
ReadAmnt();
lcdcmd(0x80);
lcdstring("USER2 AMOUNT:       ");
DisplayAmnt(0X8D,User2amt);
lcdcmd(0xC0);
lcdstring("RISE:   Kg          ");
DisplayRise(0XC5,User2Rise);
lcdcmd(0x94);
lcdstring("SUGAR:   Kg         ");
DisplaySugar(0x9A,User2Sugar);
lcdcmd(0xD4);
lcdstring("KEROSENE:   Lts     ");
DisplayKerosene(0XDD,User2Kerosene);
User=0;
break;
}
case 3:
{
ReadAmnt();
lcdcmd(0x80);
lcdstring("USER3 AMOUNT:       ");
DisplayAmnt(0X8D,User3amt);
lcdcmd(0xC0);
lcdstring("RISE:   Kg          ");
DisplayRise(0XC5,User3Rise);
lcdcmd(0x94);
lcdstring("SUGAR:   Kg         ");
DisplaySugar(0x9A,User3Sugar);
lcdcmd(0xD4);
lcdstring("KEROSENE:   Lts     ");
DisplayKerosene(0XDD,User3Kerosene);
User=0;
break;
}

# 267
}
ReadStock();
if(RC1)
DisplayStock();
_delay((unsigned long)((500)*(20000000/4000.0)));
}
}

